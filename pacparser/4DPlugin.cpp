/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PAC
 #	author : miyako
 #	2018/01/07
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark -

bool IsProcessOnExit()
{
	C_TEXT name;
	PA_long32 state, time;
	PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
	CUTF16String procName(name.getUTF16StringPtr());
	CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
	return (!procName.compare(exitProcName));
}

void OnStartup()
{
	pacparser_init();
}

void OnCloseProcess()
{
	if(IsProcessOnExit())
	{
		pacparser_cleanup();
	}
}

#pragma mark -
void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :
			OnStartup();
			break;
			
		case kCloseProcess :
			OnCloseProcess();
			break;
			// --- PAC

		case 1 :
			PAC_FIND_PROXY(pResult, pParams);
			break;

	}
}

// -------------------------------------- PAC -------------------------------------


void PAC_FIND_PROXY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	CUTF8String pac, url, host;
	Param1.copyUTF8String(&pac);
	Param2.copyUTF8String(&url);
	Param3.copyUTF8String(&host);
	
	pacparser_parse_pac_string((const char *)pac.c_str());
	
	char *proxy = pacparser_find_proxy((const char *)url.c_str(), (const char *)host.c_str());
	
	if(proxy)
		returnValue.setUTF8String((const uint8_t *)proxy, strlen(proxy));
	
	returnValue.setReturn(pResult);
}

